import streamlit as st
import openai
from openai import OpenAI

client = OpenAI(
    # Streamlit Community Cloud„ÅÆ„ÄåSecrets„Äç„Åã„ÇâOpenAI API key„ÇíÂèñÂæó
    api_key = st.secrets.OpenAIAPI.openai_api_key
)

import datetime

dt = datetime.datetime.today()  # „É≠„Éº„Ç´„É´„Å™ÁèæÂú®„ÅÆÊó•‰ªò„Å®ÊôÇÂàª„ÇíÂèñÂæó

# st.session_state„Çí‰Ωø„ÅÑ„É°„ÉÉ„Çª„Éº„Ç∏„ÅÆ„ÇÑ„Çä„Å®„Çä„Çí‰øùÂ≠ò
if "messages" not in st.session_state:
    st.session_state["messages"] = [{
            "role": "system", 
            "content": st.secrets.AppSettings.chatbot_setting + 
                " ‰ªäÊó•„ÅØ" + str(dt) + "„Åß„Åô„ÄÇ" + 
                " „ÅÇ„Å™„Åü„ÅØ„ÅÑ„Åæ„ÄÅÂæ≥Â≥∂Â§ßÂ≠¶Â∏∏‰∏âÂ≥∂„Ç≠„É£„É≥„Éë„Çπ„Å´„ÅÑ„Åæ„Åô„ÄÇ" + 
                " „Å®„Åè„ÅΩ„Çì„ÅØ„ÄÅÂæ≥Â≥∂Â§ßÂ≠¶„Å´‰Ωè„ÅøÁùÄ„ÅÑ„Å¶„ÅÑ„Çã„Éû„Çπ„Ç≥„ÉÉ„Éà„Ç≠„É£„É©„ÇØ„Çø„Éº„Åß„Åô„ÄÇ" +
                " system„Å´‰∏é„Åà„Çâ„Çå„ÅüÊÉÖÂ†±‰ª•Â§ñ„ÅÆÊÉÖÂ†±„ÇíÁî®„ÅÑ„Å¶‰ºöË©±„Åó„Å¶„ÅØ„ÅÑ„Åë„Åæ„Åõ„Çì„ÄÇ"
        }
    ]
    #st.write(st.session_state["messages"])

# „ÉÅ„É£„ÉÉ„Éà„Éú„ÉÉ„Éà„Å®„ÇÑ„Çä„Å®„Çä„Åô„ÇãÈñ¢Êï∞
def communicate():
    user_input = st.session_state["user_input"]
    inputs = [m.surface()  if m.part_of_speech()[0] in morph else ""  for m in tokenizer_obj.tokenize(user_input, mode)]
    #if len(inputs) > 0:
        #st.write(inputs)

    target = []
    for i in range(len(ms_)):
        m = ms_[i]
        for input in inputs:
            if len(input) > 1:
                if input in m:
                    #st.write("key " + input)
                    q = qs_[i].get_text() if i < len(qs_) else ""
                    r = rs_[i].get_text() if i < len(rs_) else ""
                    a = as_[i].get_text() if i < len(as_) else ""
                    target.append("Ë≥™Âïè: " + q + "(" + r + ") ÂõûÁ≠î: " + a)
    target = ", ".join(target)
    #if len(target) > 0: 
        #st.write(target)
    
    messages = st.session_state["messages"]
    user_message = {
        "role": "user", 
        "content": st.session_state["user_input"]
    }
    user_message_ = {}
    if len(target) > 0: 
        #messages[0] = {
        #    "role": "system", 
        #    "content": st.secrets.AppSettings.chatbot_setting + 
        #        "„Å®„Åè„ÅΩ„ÇìAIÂ°æ„Åß„ÅØÊ¨°„ÅÆ„Çà„ÅÜ„Å´Ë™¨Êòé„Åï„Çå„Å¶„ÅÑ„Åæ„Åô„ÄÇ" + 
        #        target + #st.secrets.AppSettings.chatbot_setting2 + 
        #        "„Åì„ÅÆÂÜÖÂÆπ„ÅØ„Åô„Åπ„Å¶Ê≠£„Åó„ÅÑ„ÅÆ„Åß„ÄÅ„Åì„Çå„ÇíÂÖÉ„Å´„ÄÅ„Åß„Åç„Çã„Å†„ÅëÂéüÊñá„ÅÆ„Åæ„Åæ„ÄÅÂõûÁ≠î„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ" + 
        #        " system„Å´‰∏é„Åà„Çâ„Çå„ÅüÊÉÖÂ†±‰ª•Â§ñ„ÅÆÊÉÖÂ†±„ÇíÁî®„ÅÑ„Å¶‰ºöË©±„Åó„Å¶„ÅØ„ÅÑ„Åë„Åæ„Åõ„Çì„ÄÇ"
        #}
        user_message_ = {
            "role": user_message["role"], 
            "content": "„Äå" + user_message["content"] + "„Äç„ÅÆÂÜÖÂÆπ„Å´„Å§„ÅÑ„Å¶„ÄÅ" + 
                "„Äå" + target + "„Äç„ÅÆÂÜÖÂÆπ„ÇíÂÖÉ„Å´„ÄÅÂõûÁ≠î„Åß„Åç„ÇãÂ†¥Âêà„ÅØ„ÄÅ„Åß„Åç„Çã„Å†„ÅëÂéüÊñá„ÅÆ„Åæ„Åæ„ÄÅÁßÅ„Å´ÂõûÁ≠î„Çí„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ" + 
                "‰∏é„Åà„Çâ„Çå„ÅüÊÉÖÂ†±‰ª•Â§ñ„ÇíÁî®„ÅÑ„Å¶‰ºöË©±„Åó„Å¶„ÅØ„ÅÑ„Åë„Åæ„Åõ„Çì„ÄÇ"
        }
    else:
        #messages[0] = {
        #    "role": "system", 
        #    "content": st.secrets.AppSettings.chatbot_setting + 
        #        " ‰ªäÊó•„ÅØ" + str(dt) + "„Åß„Åô„ÄÇ" + 
        #        " „ÅÇ„Å™„Åü„ÅØ„ÅÑ„Åæ„ÄÅÂæ≥Â≥∂Â§ßÂ≠¶Â∏∏‰∏âÂ≥∂„Ç≠„É£„É≥„Éë„Çπ„Å´„ÅÑ„Åæ„Åô„ÄÇ" + 
        #        " „Å®„Åè„ÅΩ„Çì„ÅØ„ÄÅÂæ≥Â≥∂Â§ßÂ≠¶„Å´‰Ωè„ÅøÁùÄ„ÅÑ„Å¶„ÅÑ„Çã„Éû„Çπ„Ç≥„ÉÉ„Éà„Ç≠„É£„É©„ÇØ„Çø„Éº„Åß„Åô„ÄÇ" +
        #        " system„Å´‰∏é„Åà„Çâ„Çå„ÅüÊÉÖÂ†±‰ª•Â§ñ„ÅÆÊÉÖÂ†±„ÇíÁî®„ÅÑ„Å¶‰ºöË©±„Åó„Å¶„ÅØ„ÅÑ„Åë„Åæ„Åõ„Çì„ÄÇ"
        #}
        user_message_ = {
            "role": "user", 
            "content": "„Äå" + st.session_state["user_input"] +  "„Äç„ÅÆÂÜÖÂÆπ„Åå„ÄÅÊå®Êã∂„ÅÆÂ†¥Âêà„ÅØ„ÄÅÁ¥†Áõ¥„Å´ÂõûÁ≠î„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ" +
                "Ëá™Â∑±Á¥π‰ªã„ÇÑÂêçÂâç„ÅÆÁ¢∫Ë™ç„ÅØÁ©çÊ•µÁöÑ„Å´„Åó„Åæ„Åó„Çá„ÅÜ„ÄÇ" + 
                "„Å®„Åè„ÅΩ„ÇìAIÂ°æ„Å´Èñ¢ÈÄ£„Åô„ÇãË©±È°å„ÅÆÂ†¥Âêà„ÅØ„ÄÅËøîÁ≠îÊñá„ÅÆÂΩ¢„Åß1Êñá30Â≠ó‰ª•ÂÜÖ„ÅßÂõûÁ≠î„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ" + 
                 #"„Å®„Åè„ÅΩ„ÇìAIÂ°æ„Å∏„ÅÆË≥™Âïè„Å™„Çâ„Å∞„ÄÅËøîÁ≠îÊñá„ÅÆÂΩ¢„Åß1Êñá30Â≠ó‰ª•ÂÜÖ„ÅßÂõûÁ≠î„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ" + 
                "„Åù„Çå‰ª•Â§ñ„ÅÆÂ†¥Âêà„ÅØ„ÄÅ„Äå„Å©„ÅÜ„ÅÑ„ÅÜÊÑèÂë≥„Åã„Å™Ôºü„Äç„Å®ÂõûÁ≠î„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ"
        }
    
    _messages = st.session_state["messages"]
    _messages.append(user_message_)
    
    if len(messages) > 5:
        _messages = [_messages[0]] + _messages[len(messages)-5:]
    
    completion = client.chat.completions.create(
        model = "gpt-3.5-turbo",
        messages = _messages, 
        temperature=st.secrets.AppSettings.temperature
    )
    #st.write(_messages)
    messages[len(messages)-1] = user_message
    
    st.session_state["messages"] = messages

    bot_message = {
        "role": completion.choices[0].message.role,
        "content": completion.choices[0].message.content, 
    }
    messages.append(bot_message)

    st.session_state["user_input"] = ""  # ÂÖ•ÂäõÊ¨Ñ„ÇíÊ∂àÂéª
    #st.write(messages)


# „É¶„Éº„Ç∂„Éº„Ç§„É≥„Çø„Éº„Éï„Çß„Ç§„Çπ„ÅÆÊßãÁØâ
st.title(st.secrets.AppSettings.title)
st.write(st.secrets.AppSettings.body)
st.write(st.secrets.AppSettings.body2)
st.write(st.secrets.AppSettings.body3)

user_input = st.text_input(st.secrets.AppSettings.input, key="user_input", on_change=communicate)

if st.session_state["messages"]:
    messages = st.session_state["messages"]

    #st.write(messages);

    for message in messages[1:]:#reversed(messages[1:]):  # Áõ¥Ëøë„ÅÆ„É°„ÉÉ„Çª„Éº„Ç∏„Çí‰∏ä„Å´
        speaker = ""
        if message["role"]=="assistant":
            speaker="ü§ñ"
        elif message["role"]=="user":
            speaker = "üôÇ"
        else:
            continue
        st.write(speaker + ": " + message["content"])

    #if len(messages) > 5:
    #    st.session_state["messages"] = [messages[0]] + messages[3:]

from bs4 import BeautifulSoup
import requests

url = "https://www.tokushima-u.ac.jp/ai/tokupon/qalist2021.html"

res = requests.get(url)
res.encoding = res.apparent_encoding
#soup = BeautifulSoup(res.text, 'html.parser')
soup = BeautifulSoup(res.content.decode("utf-8", "ignore"), "html.parser") #ËøΩÂä†
#title_text = soup.find('title').get_text()
qs_ = soup.find_all(class_="q")
rs_ = soup.find_all(class_="r")
as_ = soup.find_all(class_="a")
#st.write(str(len(qs_)) + ' ' + str(len(rs_)) + ' ' + str(len(as_)))


from sudachipy import tokenizer
from sudachipy import dictionary

tokenizer_obj = dictionary.Dictionary().create()

mode = tokenizer.Tokenizer.SplitMode.B
#words = [m.surface() for m in tokenizer_obj.tokenize(title_text, mode)]
#st.write(words)

morph = ('ÂêçË©û')
ms_ = []

for i in range(len(qs_)) : 
    m = []
    q = qs_[i].get_text() if i < len(qs_) else ""
    r = rs_[i].get_text() if i < len(rs_) else ""
    a = as_[i].get_text() if i < len(as_) else ""
    #st.write(q + '(' + r + ') ' + a)
    words_q = [m.surface() if m.part_of_speech()[0] in morph else ""  for m in tokenizer_obj.tokenize(q, mode)]
    words_r = [m.surface() if m.part_of_speech()[0] in morph else ""  for m in tokenizer_obj.tokenize(r, mode)]
    words_a = [m.surface() if m.part_of_speech()[0] in morph else ""  for m in tokenizer_obj.tokenize(a, mode)]
    m = words_q + words_r + words_a
    ms_.append(m)
#st.write(ms_)

#st.write(messages)
